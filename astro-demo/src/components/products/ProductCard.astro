---
interface Props {
  id: string;
  name: string;
  sDescription: string;
  price: number;
  imageData: string;
  href: string;
}
const { id, name, sDescription, price, imageData, href } = Astro.props;
---

<a
  href="#"
  class="product-card group overflow-hidden rounded-lg border-l-orange-100 shadow"
  data-id={id}
>
  <div class="relative">
    <img
      src={imageData}
      alt=""
      width="1500"
      height="1860"
      loading="eager"
      sizes="
    (min-width: 1540px) 348px,
    (min-width: 1280px) 284px,
    (min-width: 1040px) 309px,
    (min-width: 780px) 348px,
    (min-width: 640px) 284px,
    calc(100vw - 48px)
  "
    />
    <div
      class="absolute inset-0 z-10 grid items-end justify-items-center opacity-0 transition-all group-hover:bg-black/10 group-hover:opacity-100"
    >
      <button class="w-full gap-3 rounded-none btn-add-cart">
        <span
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-5 w-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 00-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 00-16.536-1.84M7.5 14.25L5.106 5.272M6 20.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm12.75 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0z"
            ></path>
          </svg></span
        > Shop now
      </button>
    </div>
  </div>

  <div class="flex bg-[#0d0f14] justify-between py-6 px-5">
    <h3 class="ancor group-hover:underline font-bold text-xl">
      {name}
    </h3>
    <p class="text-gray-400 font-bold">
      ${price}
    </p>
  </div>
</a>

<script>
  let allProducts: any = [];
  const productCard = document.querySelectorAll(".product-card");
  let totalValue = document.querySelector(".total-value") as HTMLElement;
  const cartContainer = document.querySelector(".products-information");
  const rowProduct = document.querySelector(".row-product");

  const cartEmpty = () => {
    if (allProducts.length <= 0) {
      const showInformationProduct = document.createElement("DIV");
      showInformationProduct.innerHTML = `
      <h2 class="text-xl  text-center p-4">The cart is empty</h2>
      `;
      rowProduct?.append(showInformationProduct);
    }
  };
  cartEmpty();

  productCard.forEach((product) => {
    product.addEventListener("click", (e: any) => {
      if (e.target?.classList.contains("ancor")) {
        const id = e.target.parentElement.parentElement.getAttribute("data-id");
        window.location.href = `/inventory/${id}`;
      }
      e.preventDefault();
      if (e.target?.classList.contains("btn-add-cart")) {
        const actualProduct =
          e.target.parentElement.parentElement.parentElement;
        const infoProduct = {
          quantity: 1,
          id: actualProduct.getAttribute("data-id"),
          title: actualProduct.querySelector("h3").textContent,
          image: actualProduct.querySelector("img").src,
          price: actualProduct.querySelector("p").textContent,
        };
        const exist = allProducts.some(
          (product: any) => product.title === infoProduct.title
        );
        if (exist) {
          const products = allProducts.map((product: any) => {
            if (product.title === infoProduct.title) {
              product.quantity++;
              return product;
            } else {
              return product;
            }
          });
          allProducts = [...products];
        } else {
          allProducts = [...allProducts, infoProduct];
        }
        showHTML();
      }
    });
  });

  const showHTML = () => {
    if (rowProduct !== null && rowProduct !== undefined) {
      rowProduct.innerHTML = "";
    } else {
      // Handle the case where rowProduct is null or undefined
    }
    let total = 0;

    allProducts.forEach((product: any) => {
      const showInformationProduct = document.createElement("DIV");
      showInformationProduct.innerHTML = `
      <li class="flex justify-between py-8" data-id=${product.id}>
						<div class="flex gap-5">
							<img
								src=${product.image}
								class="rounded-lg w-28 h-24"
								alt=""
							/>
							<div class="col-span-7 lg:col-span-8 flex flex-col gap-2">
								<a class="hover:underline w-fit" href="">${product.title}</a>
								<p class="text-xs">Quantity: <span>${product.quantity}</span></p>
							</div>
						</div>

						<div class="col-span-2 items-end flex justify-between flex-col">
							<button class="w-8 h-8"
								><svg
									xmlns="http://www.w3.org/2000/svg"
									class="delete-product icon icon-tabler icon-tabler-trash transition-all duration-200 ease-in-out hover:scale-110 scale-90 hover:scale-110 rounded-md"
									viewBox="0 0 24 24"
									stroke-width="2"
									stroke="currentColor"
									fill="none"
									stroke-linecap="round"
									stroke-linejoin="round"
								>
									<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
									<path d="M4 7l16 0"></path>
									<path d="M10 11l0 6"></path>
									<path d="M14 11l0 6"></path>
									<path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path>
									<path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path>
								</svg>
                </button>
							<div><p class="font-medium">${product.price}</p></div>
						</div>
					</li>
      `;
      rowProduct?.append(showInformationProduct);
      // persistProduct(product);
      total = total + product.quantity * parseFloat(product.price.slice(2));
    });
    totalValue.innerText = `$${total}`;
  };
  rowProduct?.addEventListener("click", (e: any) => {
    let product;
    let productId: any;
    if (e.target?.classList.contains("delete-product")) {
      product = e.target.parentElement.parentElement.parentElement;
      productId = product.getAttribute("data-id"); // Cambiar por el id
      allProducts.forEach((product: any) => {
        if (product.id === productId) {
          console.log("Se seleccionaron: " + product.quantity + " unidades");
          if (product.quantity === 1) {
            allProducts = allProducts.filter(
              (product: any) => product.id !== productId
            );
            showHTML();
            // deleteProductLS(productId);
          } else {
            product.quantity--;
            showHTML();
          }
        }
      });
      showHTML();
      cartEmpty();
      // deleteProductLS(productId);
    }
    // deleteProductLS(productId);
  });

  // function persistProduct(product: any) {
  // 	let products: any[];
  // 	products = getProductsLS();
  // 	products.push(product);
  // 	localStorage.setItem("products", JSON.stringify(products));
  // }

  // function getProductsLS() {
  // 	let productLS: any[];
  // 	if (localStorage.getItem("products") === null) {
  // 		// Corregir la condición aquí
  // 		productLS = [];
  // 	} else {
  // 		productLS = JSON.parse(localStorage.getItem("products"));
  // 	}
  // 	return productLS;
  // }

  // function deleteProductLS(productId: any) {
  // 	let productsLS: any[];
  // 	productsLS = getProductsLS();
  // 	productsLS.forEach((productLs, index) => {
  // 		if (productLs.id === productId) {
  // 			productsLS.splice(index, 1);
  // 		}
  // 	});
  // 	localStorage.setItem("products", JSON.stringify(productsLS));
  // }

  // function readLocalStorage() {
  // 	let productsLS: any[];
  // 	productsLS = getProductsLS();
  // 	productsLS.forEach((product) => {
  // 		const showInformationProduct = document.createElement("DIV");
  // 		showInformationProduct.innerHTML = `
  //   <li class="flex justify-between py-8" data-id=${product.id}>
  // 					<div class="flex gap-5">
  // 						<img
  // 							src=${product.image}
  // 							class="rounded-lg w-28 h-24"
  // 							alt=""
  // 						/>
  // 						<div class="col-span-7 lg:col-span-8 flex flex-col gap-2">
  // 							<a class="hover:underline w-fit" href="">${product.title}</a>
  // 							<p class="text-xs">Quantity: <span>${product.quantity}</span></p>
  // 						</div>
  // 					</div>

  // 					<div class="col-span-2 items-end flex justify-between flex-col">
  // 						<button class="w-8 h-8"
  // 							><svg
  // 								xmlns="http://www.w3.org/2000/svg"
  // 								class="delete-product icon icon-tabler icon-tabler-trash transition-all duration-200 ease-in-out hover:scale-110 scale-90 hover:scale-110 rounded-md"
  // 								viewBox="0 0 24 24"
  // 								stroke-width="2"
  // 								stroke="currentColor"
  // 								fill="none"
  // 								stroke-linecap="round"
  // 								stroke-linejoin="round"
  // 							>
  // 								<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
  // 								<path d="M4 7l16 0"></path>
  // 								<path d="M10 11l0 6"></path>
  // 								<path d="M14 11l0 6"></path>
  // 								<path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path>
  // 								<path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path>
  // 							</svg>
  //             </button>
  // 						<div><p class="font-medium">${product.price}</p></div>
  // 					</div>
  // 				</li>
  //   `;
  // 		rowProduct?.append(showInformationProduct);
  // 	});
  // }
  document.addEventListener("DOMContentLoaded", () => {
    // readLocalStorage();
  });
</script>

<style>
  .btn-add-cart {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #212632;
    padding: 0.75rem 2rem;
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 500;
  }

  .btn-add-cart:hover {
    opacity: 0.9;
  }
  .button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
  .shadow {
    box-shadow:
      0 1px 3px 0 #212632,
      0 1px 2px -1px #212632;
  }
</style>
